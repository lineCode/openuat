/* Copyright Rene Mayrhofer
 * File created 2006-06-06
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */
package org.eu.mayrhofer.sensors;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;

import org.apache.log4j.Logger;

/** This class implements a reader for the "RAW" data format generated by 
 * Spark Fun Electronics WiTilt v2.5 sensors. It is a simple ASCII-based
 * format in the form:
 * 
 * X=526    Y=473   Z=741
 * X=522    Y=481   Z=753
 * X=514    Y=480   Z=747
 * X=518    Y=474   Z=748
 * X=521    Y=481   Z=745
 * 
 * This class depends on the devices being pre-configured appropriately, e.g.
 * to sample all 3 axises and with the correct sampling rate. They also need to
 * be configured to generate their "RAW" data stream. 
 * 
 * @author Rene Mayrhofer
 * @version 1.0
 */
public class WiTiltRawReader extends AsciiLineReaderBase {
	/** Our log4j logger. */
	private static Logger logger = Logger.getLogger(WiTiltRawReader.class);

	/** Initializes the WiTilt RAW reder. It only saves the
	 * passed parameters and opens the InputStream to read from the specified
	 * file, and thus implicitly to check if the file exists and can be opened.
	 * 
	 * @param filename The log to read from. This may either be a normal log file
	 *                 when simulation is intended or it can be a FIFO/pipe to read
	 *                 online data.
	 * @throws FileNotFoundException When filename does not exist or can not be opened.
	 */
	public WiTiltRawReader(String filename) throws FileNotFoundException {
		// we have a maximum of 3 values to read per sample
		super(filename, 3);
	}
	
	/** A helper function to parse single line of the format produced by 
	 * parport-pulsewidth. This method creates the samples and emits events.
	 * @param line The line to parse.
	 */
	protected void parseLine(String line) {
		StringTokenizer st = new StringTokenizer(line, " =", false);
		try {
			double[] values = new double[maxNumLines];
			
			// just read all values
			for (int i=0; i<maxNumLines; i++) {
				char valName = (char) ('X' + i);
				if (! st.nextToken().equals(Character.toString(valName))) {
					logger.warn("Did not get start of " + valName + " value, skipping line");
					return;
				}
				try {
					values[i] = Integer.parseInt(st.nextToken());
				}
				catch (NumberFormatException e) {
					logger.warn("Could not parse value for " + valName + ", skipping line");
				}
			}
			
			emitSample(values);
		}
		catch (NoSuchElementException e) {
			logger.warn("Could not parse line from WiTilt sensor, skipping it");
		}
	}
	
	
	/////////////////////////// test code begins here //////////////////////////////
	public static void main(String[] args) throws IOException {
		mainRunner("WiTiltRawReader", args);
	}
}
