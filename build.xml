<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Rene Mayrhofer
     File created 2005-09
   
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
-->

<project name="openuat" default="junit" basedir=".">
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="bin" location="${build}/bin"/>
    <property name="lib" location="lib"/>
    <property name="nativelib" location="nativelib"/>
    <property name="dist" location="dist"/>
    <property name="dist.webstart" location="${dist}/webstart"/>
    <property name="dist.javadoc" location="${dist}/javadoc"/>
    <property name="reports" location="reports"/>
    <property name="reports.tests" location="${reports}/tests"/>
    <property name="thirdparty" location="thirdparty"/>
    <property name="thirdparty-BC-core" location="${thirdparty}/bouncycastle-core-deps"/>
    <property name="bin-BC-core" location="${build}/bin-bouncycastle-core"/>
    <property name="thirdparty-BC-x509" location="${thirdparty}/bouncycastle-x509-deps"/>
    <property name="bin-BC-x509" location="${build}/bin-bouncycastle-x509"/>
    <property name="thirdparty-BC-openssl" location="${thirdparty}/bouncycastle-openssl-deps"/>
    <property name="bin-BC-openssl" location="${build}/bin-bouncycastle-openssl"/>
    <property name="thirdparty-apache-bzip2" location="${thirdparty}/apache-bzip2"/>
    <property name="bin-apache-bzip2" location="${build}/bin-apache-bzip2"/>
    <property name="compile.debug" value="true"/>

    <!-- these are the target JARs -->
    <property name="dist.mainclass" value="no-main-class-at-the-moment"/>
    <property name="dist.mainclass.ipsecclient" value="org.openuat.apps.IPSecConnectorClient"/>
    <!-- This is just the core JAR file, implementing basic key agreement
	 between hosts and the Relate authentication protocol. It has only 
	 minor dependencies on crypto classes. -->
    <property name="jarfile.core" location="${dist}/${ant.project.name}-core.jar"/>
    <property name="dependencies.core" value="${thirdparty-BC-core}:${thirdparty-apache-bzip2}"/>
    <!-- This one includes the secure channels package and the available
	 implementations for secure channels. Since the IPSec secure 
	 channel implementations can support X.509 certificates, this
	 has huge dependencies on the X.509 support in Bouncycastle. 
	 It of course needs the core. -->
    <property name="jarfile.channels" location="${dist}/${ant.project.name}-channels.jar"/>
    <property name="dependencies.channels" value="${thirdparty-BC-x509}"/>
    <!-- And finally the applications. This needs the channels. -->
    <property name="jarfile.apps" location="${dist}/${ant.project.name}-apps.jar"/>
    <property name="dependencies.channels" value="${thirdparty-BC-openssl}"/>
    <!-- This is the distribution bundle including everything, even the 
	 dependencies -->
    <property name="jarfile.distbundle" location="${dist}/${ant.project.name}-distbundle.jar"/>
    <!-- the javadoc tree -->
    <property name="zipfile.javadoc" location="${dist}/${ant.project.name}-doc.zip" />
    <!-- the source tree, excluding files which can't be redistributed because of their license -->
    <property name="zipfile.source" location="${dist}/${ant.project.name}-src.zip" />
    
    <!-- for MIDP builds -->
    <property name="preverified" location="bin-preverified"/>
    <property name="midp_home" value="/opt/j2me/WTK2.2" />
    <property name="midp_libs" value="${midp_home}/lib/midpapi20.jar:${midp_home}/lib/cldcapi11.jar" />

    <!-- this can be used in a refid for filesets -->
    <fileset id="lib.alljars" dir="${lib}">
        <include name="**/*.jar"/>
    </fileset>
    <!-- the list of jar files to include in the distbundle -->
    <fileset id="lib.bundleinclude-jars" dir="${lib}">
	    <include name="log4j-1.2.jar"/>
	    <include name="kxml2-2.2.2.jar"/>
		<include name="RXTXcomm.jar"/>
    </fileset>
    
    <!-- these can be used in a refid for classpaths -->
    <path id="lib.path.jars">
        <fileset refid="lib.alljars"/>
    </path>
    <path id="lib.path.jars_BCcore">
	    <fileset refid="lib.alljars"/>
	    <pathelement location="${bin-BC-core}"/>
    </path>
    <path id="lib.path.jars_BCx509">
	    <fileset refid="lib.alljars"/>
	    <pathelement location="${bin-BC-core}"/>
	    <pathelement location="${bin-BC-x509}"/>
    </path>
    <path id="lib.path.all">
	    <fileset refid="lib.alljars"/>
	    <pathelement location="${bin-BC-core}"/>
	    <pathelement location="${bin-BC-x509}"/>
	    <pathelement location="${bin-BC-openssl}"/>
	    <pathelement location="${bin-apache-bzip2}"/>
	    <!-- We also need SWT to compile, but can't include it in the
           distribution JAR because there are multiple OS versions.
           Therefore, include it only in this class path but not in
           the JAR collection set. -->
	    <pathelement location="${lib}/linux/swt-3.1.1_gtk.linux.x86.jar"/>
    </path>

    <target name="compile" description="Compile code">
        <mkdir dir="${bin}"/>
	<mkdir dir="${bin-BC-core}"/>
	<mkdir dir="${bin-BC-x509}"/>
	<mkdir dir="${bin-BC-openssl}"/>
	<mkdir dir="${bin-apache-bzip2}"/>
	
	<!-- Compile the BC core dependencies -->
	<javac srcdir="${thirdparty-BC-core}" destdir="${bin-BC-core}" includeAntRuntime="no"
	       classpathref="lib.path.jars" debug="${compile.debug}" target="1.2" source="1.2" />
	
	<!-- Compile the BC X.509 dependencies -->
	<javac srcdir="${thirdparty-BC-x509}" destdir="${bin-BC-x509}" includeAntRuntime="no"
	       classpathref="lib.path.jars_BCcore" debug="${compile.debug}" target="1.2" source="1.2" />
	
	<!-- Compile the BC openssl interoperability dependencies -->
	<javac srcdir="${thirdparty-BC-openssl}" destdir="${bin-BC-openssl}" includeAntRuntime="no"
	       classpathref="lib.path.jars_BCx509" debug="${compile.debug}" target="1.2" source="1.2" />

	<!-- Compile the Apache BZIP2 stream dependencies -->
	<javac srcdir="${thirdparty-apache-bzip2}" destdir="${bin-apache-bzip2}" includeAntRuntime="no"
	       classpathref="lib.path.jars" debug="${compile.debug}" target="1.2" source="1.2" />

	<!-- Compile our own classes... -->
    <javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
	       classpathref="lib.path.all" debug="${compile.debug}" target="1.2" source="1.2">
     </javac>
    </target>

    <target name="compile-midp" description="Compile special classes for MIDP2.0">
        <javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
               classpathref="lib.path.all" debug="${compile.debug}" target="1.2" source="1.2">
        <!-- TODO: missing, include midp jars in classpath -->
        </javac>
    </target>

    <target name="preverify" depends="compile">
        <mkdir dir="${preverified}" />
        <exec executable="${midp_home}/bin/preverify">
	    <arg line="-classpath ${midp_libs}"/>
	    <arg line="-d ${preverified}"/>
	    <arg line="${bin}"/>
	</exec>
    </target>

    <target name="jar" depends="compile" description="Build jar">
        <mkdir dir="${dist}"/>
        <jar jarfile="${jarfile.core}" manifest="${src}/Manifest"
	     update="false" duplicate="fail" index="true">
	    <fileset dir="${bin}"
             includes="org/openuat/authentication/**/*.class org/openuat/sensors/**/*.class org/openuat/features/**/*.class org/openuat/util/**/*.class" />
            <fileset dir="${bin-BC-core}" />
            <fileset dir="${bin-apache-bzip2}" />
	    <fileset dir="${src}" includes="*.properties" />
        </jar>
    
	<jar jarfile="${jarfile.channels}" manifest="${src}/Manifest"
	     update="false" duplicate="fail" index="true">
		<fileset dir="${bin}"
			 includes="org/openuat/channel/**/*.class" />
		<fileset dir="${bin-BC-x509}" />
	</jar>
    
	<jar jarfile="${jarfile.apps}" manifest="${src}/Manifest"
	     update="false" duplicate="fail" index="true">
		<fileset dir="${bin}"
			 includes="org/openuat/apps/**/*.class" />
		<fileset dir="${bin-BC-openssl}" />
	</jar>
    
	<jar jarfile="${jarfile.distbundle}" manifest="${src}/Manifest"
	     update="false" duplicate="fail" index="true">
		<fileset dir="${bin}" />
 		<fileset dir="${bin-BC-core}" />
		<fileset dir="${bin-BC-x509}" />
		<fileset dir="${bin-BC-openssl}" />
		<fileset dir="${bin-apache-bzip2}" />
		<fileset dir="${src}" includes="*.properties" />
		<!-- Merge library jars into final jar file -->
		<zipgroupfileset refid="lib.bundleinclude-jars" />
		<fileset dir="${lib}" includes="*-copyright" />
	</jar>
    </target>

    <target name="junit" depends="jar" description="Run unit tests">
	    <mkdir dir="${reports.tests}"/>
	    <!-- for the jvmarg to work, need to set fork=true -->
	    <junit printsummary="on" haltonfailure="true"
	    haltonerror="true" showoutput="false" fork="true" forkmode="perTest">
        <!-- doesn't do anything with fork=false -->
		    <jvmarg value="-Djava.library.path=nativelib/linux" />
		    <jvmarg value="-Xmx512m" />
		    <jvmarg value="-Xms512m" />
		    <classpath>
			    <fileset refid="lib.alljars"/>
			    <pathelement location="${jarfile.core}"/>
			    <pathelement location="${jarfile.channels}"/>
			    <pathelement location="${jarfile.apps}"/>
          <!-- to also use the log4.properties file -->
          <pathelement location="${src}"/>
		    </classpath>
		    <formatter type="plain" usefile="true"/>
		    <batchtest todir="${reports.tests}">
			    <fileset dir="${src}">
				    <include name="**/*Test*.java"/>
				    <exclude name="**/MotionAuthenticationProtocol1Test.java"/>
				    <exclude name="**/MotionAuthenticationProtocol2Test.java"/>
			    </fileset>
		    </batchtest>
		    <!--<test name="org.openuat.authentication.test.MotionAuthenticationProtocol1Test" todir="${reports.tests}"/>-->
		    <!--<test name="org.openuat.authentication.test.MotionAuthenticationProtocol2Test" todir="${reports.tests}"/>-->
	    </junit>
    </target>
    
    <target name="run" depends="jar" description="Run jar file">
        <!-- executing the jar obviously does not work with an additional classpath, but only with a single
	     merged jar file, so just specify the class -->
        <!--<java jar="${jarfile}" fork="yes" failonerror="true" >-->
	    <java classname="${dist.mainclass}" fork="yes" failonerror="true" >
	    <sysproperty key="java.library.path" value="nativelib/linux" />
            <classpath>
		    <fileset refid="lib.alljars"/>
		    <pathelement location="${jarfile}"/>
	    </classpath>
        </java>
    </target>

	  <taskdef name="nsis" classname="info.waynegrant.ant.NsisTask">
    	<classpath>
      	<pathelement location="${lib}/wat-12.jar"/>
      </classpath>
    </taskdef>
    
    <target name="installer" depends="junit" description="Create installers">
    	<nsis script="${dist}/windows.nsi" verbosity="4" nocd="yes">
        <define name="distdir" value="${dist}"/>
        <define name="nativelibs" value="${thirdparty.nativelib}/windows"/>
        <scriptcmd cmd="CRCcheck on"/>
      </nsis>
    </target>

    <target name="dist-webstart" depends="jar" description="Create distribution for Java webstart">
	    <mkdir dir="${dist.webstart}"/>
	    <!-- Linux native libraries -->
	    <copy file="${lib}/linux/swt-3.1.1_gtk.linux.x86.jar" 
		  tofile="${dist.webstart}/swt-3.1_gtk.linux.x86.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_gtk.linux.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/linux/" includes="libswt*.so" />
	    </zip>
	    <zip zipfile="${dist.webstart}/rxtx-2.1-native_linux.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/linux/" includes="librxtxSerial.so" />
	    </zip>
	    
	    <!-- Windows native libraries -->
	    <copy file="${lib}/win32/swt-3.1_win32.x86.jar" 
		  tofile="${dist.webstart}/swt-3.1_win32.x86.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_win32.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/win32/" includes="swt*.dll" />
	    </zip>
	    <zip zipfile="${dist.webstart}/rxtx-2.1-native_win32.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/win32/" includes="rxtxSerial.dll" />
	    </zip>
	    <zip zipfile="${dist.webstart}/ipsec-1.0-native_win32.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/win32/" includes="ipsecJNI.dll" />
	    </zip>
	    
	    <!-- MacOXX native libraries -->
	    <copy file="${lib}/macosx/swt-3.1_macosx.jar" 
		  tofile="${dist.webstart}/swt-3.1_macosx.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_macosx.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/macosx/" includes="libswt*.jnilib" />
	    </zip>
	    <zip zipfile="${dist.webstart}/rxtx-2.1-native_macosx.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/macosx/" includes="librxtxSerial.jnilib" />
	    </zip>
	    
	    <!-- don't forget the relate core -->
	    <copy file="${lib}/relate-2.1-core.jar" todir="${dist.webstart}" />
	    <copy file="${lib}/relate-2.1-apps.jar" todir="${dist.webstart}" />
	    <!-- nor the required support libraries -->
	    <copy file="${lib}/log4j-1.2.jar" todir="${dist.webstart}" />
	    <copy file="${lib}/kxml2-2.2.2.jar" todir="${dist.webstart}" />
	    
	    <!-- and the spatial authentication distribution itself, including the JNLP file -->
	    <copy file="${jarfile.core}" todir="${dist.webstart}" />
	    <copy file="${jarfile.channels}" todir="${dist.webstart}" />
	    <copy file="${jarfile.apps}" todir="${dist.webstart}" />
	    <copy file="${dist}/IPSecConnectorClient.jnlp" todir="${dist.webstart}" />
	    
	    <!-- the key was created with 
		 "keytool -genkey -keystore dist/keystore -alias authentication -validity 1500"
		 with password "authentication" for both the keystore and the key -->
	    <signjar alias="authentication" storepass="authentication" keystore="${dist}/keystore">
		    <fileset dir="${dist.webstart}/" includes="*.jar"/>
	    </signjar>
    </target>
    
    <target name="dist-javadoc" description="Create distribution files for the documentation (Javadoc)">
	    <mkdir dir="${dist.javadoc}"/>
	    <javadoc sourcepath="${src}" destdir="${dist.javadoc}" 
		     packagenames="org.openuat.*"
		     classpathref="lib.path.all"
		     access="protected"
		     version="true" author="true" source="1.5">
		    <bottom><![CDATA[<i>2005-2006, Rene Mayrhofer.</i>]]></bottom>
		    <link href="www.openuat.org"/>
	    </javadoc>
	    
	    <!-- and also zip it up -->
	    <zip zipfile="${zipfile.javadoc}" update="true" duplicate="fail">
		    <fileset dir="${dist.javadoc}"/>
	    </zip>
    </target>
    
    <target name="dist-source" description="Create source distribution">
	    <zip zipfile="${zipfile.source}" update="true" duplicate="fail">
		    <fileset dir="." 
		    	     includes="build.xml,Changelog,.classpath,.project,src/**/*,lib/**/*,doc/**/*,dist/*.jnlp,thirdparty/bouncycastle-*-deps/**/*,thirdparty/avetanabt/**/*,thirdparty/ipsec2k.1.1/**/*.h,thirdparty/ipsec2k.1.1/**/*.cpp,thirdparty/ipsec2k.1.1/**/wstring,thirdparty/ipsec2k.1.1/**/buffer,thirdparty/ipsec2k.1.1/**/*.vcproj,thirdparty/ipsec2k.1.1/**/*.sln,thirdparty/ipsec2k.1.1/**/*.txt,thirdparty/apache-bzip2/**/*,nativelib/**/*"/>
	    </zip>
    </target>
    
    <target name="dist" depends="dist-webstart,dist-javadoc,dist-source"
	    description="Create a complete distribution, including webstart, source, and docs"/>
    
<!--    <target name="deploy-webstart" depends="dist-webstart" 
	    description="Upload the web start distribution files to the web server">
	    <scp todir="root@ubicomp.lancs.ac.uk:/home/httpd/fileadmin/relate/webstart/"
		 trust="false" failonerror="true">
		    <fileset dir="${dist.webstart}"/>
	    </scp>
	    <sshexec host="ubicomp.lancs.ac.uk" username="root" trust="false" 
		     failonerror="true" 
		     command="chown www-data:www-data /home/httpd/fileadmin/relate/webstart/*"/>
    </target>-->

    <target name="clean" description="Remove build and dist directories">
        <delete dir="${build}"/>
	<!-- <delete dir="${reports}"/> -->
        <delete>
        	<fileset dir="${dist}" includes="*.jar,*.zip"/>
        </delete>
	<delete dir="${dist.webstart}"/>
	<delete dir="${dist.javadoc}"/>
    </target>
</project>
