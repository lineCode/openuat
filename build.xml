<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Rene Mayrhofer
     File created 2005-09
   
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
-->

<project name="openuat" default="junit" basedir=".">
	<property name="src" location="src"/>
	<property name="resources" location="resources"/>
	<property name="build" location="build"/>
	<property name="bin" location="${build}/bin"/>
	<property name="lib" location="lib"/>
	<property name="nativelib" location="nativelib"/>
	<property name="dist" location="dist"/>
	<property name="dist.webstart" location="${dist}/webstart"/>
	<property name="dist.javadoc" location="${dist}/javadoc"/>
	<property name="reports" location="reports"/>
	<property name="reports.tests" location="${reports}/tests"/>
	<property name="reports.coverage" location="${reports}/coverage"/>
	<property name="reports.checkstyle" location="${reports}/checkstyle_errors.xml"/>
	<property name="checkstyle.suppressions.file" location="${src}/suppressions.xml"/>
	<property name="checkstyle.header.file" location="${src}/java.header"/>
	<property name="checkstyle.importcontrol.file" location="${src}/import-control.xml"/>
	<property name="translation.severity" value="warning"/>
	<property name="thirdparty" location="thirdparty"/>
	<property name="thirdparty-BC-core" location="${thirdparty}/bouncycastle-core-deps"/>
	<property name="bin-BC-core" location="${build}/bin-bouncycastle-core"/>
	<property name="thirdparty-BC-x509" location="${thirdparty}/bouncycastle-x509-deps"/>
	<property name="bin-BC-x509" location="${build}/bin-bouncycastle-x509"/>
	<property name="thirdparty-BC-openssl" location="${thirdparty}/bouncycastle-openssl-deps"/>
	<property name="bin-BC-openssl" location="${build}/bin-bouncycastle-openssl"/>
	<property name="thirdparty-apache-bzip2" location="${thirdparty}/apache-bzip2"/>
	<property name="bin-apache-bzip2" location="${build}/bin-apache-bzip2"/>
	<property name="thirdparty-microlog" location="${thirdparty}/microlog"/>
	<property name="thirdparty-microlog-wrapper" location="${thirdparty}/log4jNoop"/>
	<property name="findbugs.home" value="${thirdparty}/findbugs-1.2.1" />
	<property name="bin-microlog" location="${build}/bin-microlog"/>
	<property name="thirdparty-avetanaNoop" location="${thirdparty}/avetanaNoop"/>
	<property name="bin-avetanaNoop" location="${build}/bin-avetanaNoop"/>
	<property name="build.midp.work" location="${build}/midp-work"/>
	<property name="build.midp.temp" location="${build}/midp-tmp"/>
	<property name="bin.midp" location="${build}/midp-bin"/>
	<property name="compile.debug" value="true"/>
	<property name="debug" value="false"/>

	<!-- these are the target JARs -->
	<property name="dist.mainclass" value="no-main-class-at-the-moment"/>
	<property name="dist.mainclass.ipsecclient" value="org.openuat.apps.IPSecConnectorClient"/>
	<!-- This is just the core JAR file, implementing basic key agreement
	 between hosts and the Relate authentication protocol. It has only 
	 minor dependencies on crypto classes. -->
	<property name="jarfile.core" location="${dist}/${ant.project.name}-core.jar"/>
	<property name="dependencies.core" value="${thirdparty-BC-core}:${thirdparty-apache-bzip2}"/>
	<!-- This one includes the secure channels package and the available
	 implementations for secure channels. Since the IPSec secure 
	 channel implementations can support X.509 certificates, this
	 has huge dependencies on the X.509 support in Bouncycastle. 
	 It of course needs the core. -->
	<property name="jarfile.channels" location="${dist}/${ant.project.name}-channels.jar"/>
	<property name="dependencies.channels" value="${thirdparty-BC-x509}"/>
	<!-- And finally the applications. This needs the channels. -->
	<property name="jarfile.apps" location="${dist}/${ant.project.name}-apps.jar"/>
	<property name="dependencies.channels" value="${thirdparty-BC-openssl}"/>
	<!-- This is the distribution bundle including everything, even the 
	 dependencies -->
	<property name="jarfile.distbundle" location="${dist}/${ant.project.name}-distbundle.jar"/>
	<!-- the javadoc tree -->
	<property name="zipfile.javadoc" location="${dist}/${ant.project.name}-doc.zip" />
	<!-- the source tree, excluding files which can't be redistributed because of their license -->
	<property name="zipfile.source" location="${dist}/${ant.project.name}-src.zip" />
    
	<!-- Settings for MIDP builds -->
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="/opt/J2MEPolish" />
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/midp2"/>
	<property name="midp_libs" value="${polish.home}/import/midp-2.0.jar:${polish.home}/import/cldc-1.1-java5.0.jar" />
	<!-- These classes can only be compiled with J2ME MIDP class libraries -->
	<property name="midp-only-files1" value="org/openuat/apps/j2me/**/*.java" />
	<property name="midp-only-files2" value="org/openuat/sensors/j2me/**/*.java" />
	<property name="preverified" location="${build}/bin-preverified"/>
	
	<!-- These classes need at least Java 5 to compile -->
	<!-- TODO: add "com/bleugris/io/*.java" -->
	<property name="java5-files" value="org/openuat/**/test/*.java" />
	<!-- These classes need at least Java 6 to compile -->
	<property name="java6-files" value="org/openuat/apps/util/TrayIconHelper.java" />
	
	<!-- this can be used in a refid for filesets -->
	<fileset id="lib.alljars" dir="${lib}">
		<include name="**/*.jar"/>
	</fileset>
	<!-- the list of jar files to include in the distbundle -->
	<fileset id="lib.bundleinclude-jars" dir="${lib}">
		<include name="log4j-1.2.jar"/>
		<include name="kxml2-2.2.2.jar"/>
		<include name="RXTXcomm.jar"/>
		<include name="avetanaBT.jar"/>
		<include name="jsapi.jar"/>
		<include name="TableLayout.jar"/>
		<include name="freetts.jar"/>
	</fileset>
    
	<!-- these can be used in a refid for classpaths -->
	<path id="lib.path.jars">
		<fileset refid="lib.alljars"/>
	</path>
	<path id="lib.path.jars_BCcore">
		<fileset refid="lib.alljars"/>
		<pathelement location="${bin-BC-core}"/>
	</path>
	<path id="lib.path.jars_BCx509">
		<fileset refid="lib.alljars"/>
		<pathelement location="${bin-BC-core}"/>
		<pathelement location="${bin-BC-x509}"/>
	</path>
	<path id="lib.path.all">
		<fileset refid="lib.alljars"/>
		<pathelement location="${bin-BC-core}"/>
		<pathelement location="${bin-BC-x509}"/>
		<pathelement location="${bin-BC-openssl}"/>
		<pathelement location="${bin-apache-bzip2}"/>
		<!-- We also need SWT to compile, but can't include it in the
		     distribution JAR because there are multiple OS versions.
		     Therefore, include it only in this class path but not in
		     the JAR collection set. -->
		<pathelement location="${lib}/linux/swt-3.1.1_gtk.linux.x86.jar"/>
	</path>

	<path id="lib.path.midp">
		<pathelement location="${wtk.home}/lib/midpapi20.jar"/>
		<pathelement location="${wtk.home}/lib/cldcapi11.jar"/>
		<pathelement location="${wtk.home}/lib/jsr082.jar"/>
		<pathelement location="${wtk.home}/lib/jsr75.jar"/>
		<pathelement location="${wtk.home}/lib/mmapi.jar"/>
		<pathelement location="${bin-microlog}"/>
		<pathelement location="${bin-BC-core}"/>
	</path>
	
	<path id="cobertura.classpath">
		<path refid="lib.path.all"/>
		<pathelement location="${lib}/cobertura-1.8.jar"/>
	</path>
	
	<!--                                                                           -->
	<!-- Starting from here, it's build rules that shouldn't need any modification -->
	<!--                                                                           -->

	<!-- Figure out the Java compiler version -->
	<available classname="java.awt.SystemTray" property="haveJava6"/>
	<available classname="java.lang.annotation.Annotation" property="haveJava5"/>
	<!-- This is really ugly, only for the echo to be nice... -->
	<condition property="haveJava6.echo" value="true" else="false">
		<isset property="haveJava6"/>
	</condition>
	<condition property="haveJava5.echo" value="true" else="false">
		<isset property="haveJava5"/>
	</condition>
	
	<!-- Figure out if we have a usable J2ME Polish and WTK installation for compiling and preverifying J2ME MIDP code -->
	<condition property="haveWTK">
		<and>
			<available file="enough-j2mepolish-build.jar" type="file" filepath="${polish.home}/lib/"/>
			<available file="jdom.jar" type="file" filepath="${polish.home}/lib/"/>
			<available classname="javax.microedition.io.SecureConnection" classpathref="lib.path.midp"/>
			<available classname="javax.microedition.pki.Certificate" classpathref="lib.path.midp"/>
			<available classname="javax.microedition.lcdui.Display" classpathref="lib.path.midp"/>
			<available classname="com.sun.cldc.io.ConsoleOutputStream" classpathref="lib.path.midp"/>
		</and>
	</condition>
	<condition property="haveWTK.echo" value="true" else="false">
		<isset property="haveWTK"/>
	</condition>

	<!-- Include the J2ME Polish tasks for building J2ME packages (but will only use it when haveWTK is set) -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"
	/>
	<!-- And a task for creating installer packages for Windows -->
	<taskdef name="nsis" classname="info.waynegrant.ant.NsisTask" classpath="${lib}/wat-12.jar"/>
	<!-- This is a task for checkstyle -->
	<taskdef resource="checkstyletask.properties" classpath="${lib}/checkstyle-4.3.jar:${lib}/commons-beanutils-core.jar:${lib}/commons-logging.jar:${lib}/antlr.jar"/>
	<!-- This is a task for findbugs -->
	<taskdef name="findbugs" classpath="${findbugs.home}/lib/findbugs-ant.jar" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>


	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
	<target name="compile" description="Compile code">
        <mkdir dir="${bin}"/>
		<mkdir dir="${bin-BC-core}"/>
		<mkdir dir="${bin-BC-x509}"/>
		<mkdir dir="${bin-BC-openssl}"/>
		<mkdir dir="${bin-apache-bzip2}"/>
	
		<!-- Keep track of the build number -->
		<buildnumber/>
		<echo message="Compiling OpenUAT build number ${build.number}, detected:" level="info"/>
		<echo message="    Java5: ${haveJava5.echo}" level="info"/>
		<echo message="    Java6: ${haveJava6.echo}" level="info"/>
		<echo message="    WTK with MIDP2.0 and CLDC1.1: ${haveWTK.echo}" level="info"/>
	
		<!-- Compile the BC core dependencies -->
		<javac srcdir="${thirdparty-BC-core}" destdir="${bin-BC-core}" includeAntRuntime="no"
		       classpathref="lib.path.jars" debug="${compile.debug}" target="1.2" source="1.2" />
	
		<!-- Compile the BC X.509 dependencies -->
		<javac srcdir="${thirdparty-BC-x509}" destdir="${bin-BC-x509}" includeAntRuntime="no"
		       classpathref="lib.path.jars_BCcore" debug="${compile.debug}" target="1.2" source="1.2" />
	
		<!-- Compile the BC openssl interoperability dependencies -->
		<javac srcdir="${thirdparty-BC-openssl}" destdir="${bin-BC-openssl}" includeAntRuntime="no"
		       classpathref="lib.path.jars_BCx509" debug="${compile.debug}" target="1.2" source="1.2" />

		<!-- Compile the Apache BZIP2 stream dependencies -->
		<javac srcdir="${thirdparty-apache-bzip2}" destdir="${bin-apache-bzip2}" includeAntRuntime="no"
		       classpathref="lib.path.jars" debug="${compile.debug}" target="1.2" source="1.2" />

		<!-- Compile our own classes... -->
		<javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
		       classpathref="lib.path.all" debug="${compile.debug}" target="1.2" source="1.2">
			<exclude name="${java5-files}" />
			<exclude name="${java6-files}" />
			<exclude name="${midp-only-files1}" />
			<exclude name="${midp-only-files2}" />
		</javac>
		
		<!-- And call the targets for compiling code that requires Java levels higher than 2 and MIDP -->
		<antcall target="compile-java5"/>
		<antcall target="compile-java6"/>
		<antcall target="compile-midp"/>
	</target>
	
	<target name="compile-java5" description="Compile code that needs Java5" if="haveJava5">
		<javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
		       classpathref="lib.path.all" debug="${compile.debug}" target="1.5" source="1.5">
			<include name="${java5-files}" />
		</javac>
	</target>

	<target name="compile-java6" description="Compile code that needs Java6" if="haveJava6">
    	<javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
	       classpathref="lib.path.all" debug="${compile.debug}" target="1.5" source="1.5">
			<include name="${java6-files}" />
     	</javac>
	</target>
	
	<!-- This is a special target for compiling J2ME MIDP-only classes, the 
	 other "common" classes are compiled in the standard compile target for
	 Java language level 1.2. -->
	<target name="compile-midp" description="Compile special classes for MIDP2.0" if="haveWTK">
		<mkdir dir="${bin-microlog}"/>
		<mkdir dir="${bin-avetanaNoop}"/>

		<!-- Compile the MicroLog dependencies -->
		<javac srcdir="${thirdparty-microlog}" destdir="${bin-microlog}" includeAntRuntime="no"
		       classpathref="lib.path.midp" debug="${compile.debug}" target="1.2" source="1.2" />

		<!-- And the wrapper around it to have it usable under the log4j package name -->
		<javac srcdir="${thirdparty-microlog-wrapper}" destdir="${bin-microlog}" includeAntRuntime="no"
		       classpathref="lib.path.midp" debug="${compile.debug}" target="1.2" source="1.2" />

		<!-- This is just a no-op avenata class when we can't use the JAR -->
		<javac srcdir="${thirdparty-avetanaNoop}" destdir="${bin-avetanaNoop}" includeAntRuntime="no"
		       classpathref="lib.path.midp" debug="${compile.debug}" target="1.2" source="1.2" />

		<javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
		       classpathref="lib.path.midp" debug="${compile.debug}" target="1.2" source="1.2"
		       includeJavaRuntime="no">
			<include name="${midp-only-files1}" />
			<include name="${midp-only-files2}" />
		</javac>
	</target>
    
	<target name="jar" depends="compile" description="Build jar">
		<mkdir dir="${dist}"/>
		<jar jarfile="${jarfile.core}" manifest="${src}/Manifest"
		     update="false" duplicate="fail" index="true">
			<fileset dir="${bin}"
				 includes="org/openuat/authentication/**/*.class org/openuat/sensors/**/*.class org/openuat/features/**/*.class org/openuat/util/**/*.class" />
			<fileset dir="${bin-BC-core}" />
			<fileset dir="${bin-apache-bzip2}" />
			<fileset dir="${src}" includes="*.properties" />
		</jar>
    
		<jar jarfile="${jarfile.channels}" manifest="${src}/Manifest"
		     update="false" duplicate="fail" index="true">
			<fileset dir="${bin}"
				 includes="org/openuat/channel/**/*.class" />
			<fileset dir="${bin-BC-x509}" />
		</jar>

		<jar jarfile="${jarfile.apps}" manifest="${src}/Manifest"
		     update="false" duplicate="fail" index="true">
			<fileset dir="${bin}"
				 includes="org/openuat/apps/**/*.class" />
			<fileset dir="${bin-BC-openssl}" />
		</jar>

		<jar jarfile="${jarfile.distbundle}" manifest="${src}/Manifest"
		     update="false" duplicate="fail" index="true">
			<fileset dir="${bin}" />
			<fileset dir="${bin-BC-core}" />
			<fileset dir="${bin-BC-x509}" />
			<fileset dir="${bin-BC-openssl}" />
			<fileset dir="${bin-apache-bzip2}" />
			<fileset dir="${src}" includes="*.properties" />
			<!-- Merge library jars into final jar file -->
			<zipgroupfileset refid="lib.bundleinclude-jars" />
			<fileset dir="${lib}" includes="*-copyright" />
		</jar>

		<!-- And call the targets for creating MIDP JARs -->
		<antcall target="jar-midp"/>
	</target>
	
	<target name="jar-midp" depends="compile" description="Build packages for J2ME MIDP" if="haveWTK">
		<delete dir="${build.midp.work}"/>
		<delete dir="${bin.midp}"/>
        <mkdir dir="${build.midp.work}"/>
        <mkdir dir="${bin.midp}"/>
		
		<!-- bad, ugly, evil, unmaintainable, and should-be-completely-unnecessary hack begins here -->
		<!-- I can't get the dumb j2mepolish build/compiler part to only use the classes 
		     the MIDlet depends on (the includes attribute obviously doesn't work, so just copy
		     the required files manually and build from there... -->
		<delete dir="${build.midp.temp}"/>
        <mkdir dir="${build.midp.temp}"/>
		<copy todir="${build.midp.temp}" failonerror="true">
			<fileset dir="${src}" includes="org/openuat/apps/j2me/BluetoothDemo.java
				org/openuat/apps/j2me/ManualAuthentication.java
				org/openuat/util/Bluetooth*.java org/openuat/util/RemoteConnection.java
				org/openuat/util/HostServerBase.java org/openuat/authentication/HostProtocolHandler.java 
				org/openuat/util/MessageListener.java org/openuat/util/LoggingHelper.java
				org/openuat/util/DebugInputStream.java org/openuat/util/DebugOutputStream.java
				org/openuat/util/ProtocolCommandHandler.java org/openuat/util/LineReaderWriter.java 
				org/openuat/authentication/SimpleKeyAgreement.java org/openuat/util/Hash.java
				org/openuat/authentication/KeyManager.java org/openuat/util/HostAuthenticationServer.java
				org/openuat/authentication/AuthenticationEventSender.java
				org/openuat/authentication/AuthenticationProgressHandler.java org/openuat/authentication/exceptions/*.java
				org/openuat/util/SafetyBeltTimer.java
				net/mypapit/java/StringTokenizer.java" />
		</copy>
		<!-- hack ends here -->

		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="ManualAuthentication"
				version="1.0.0"
				description="A demonstration MIDlet for the Bluetooth, UACAP infrastructure, and manual authentication"
				vendorName="Rene Mayrhofer"
				infoUrl="http://www.openuat.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-bt_mana.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2006, 2007 Rene Mayrhofer. All rights reserved."
			/>
			
			<!-- selection of supported devices -->
			<!--<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">-->
			<deviceRequirements>
				<!--<requirement name="Identifier" value="Generic/jtwi,Generic/midp1,Generic/Midp2Cldc11,Nokia/Series40E3,Nokia/Series60E2,Nokia/Series60E3,Sony-Ericsson/JavaPlatform6" />-->
				<!--<requirement name="Identifier" value="Generic/Midp2Cldc11" />-->
				<requirement name="Identifier" value="Generic/multi" />
				<requirement name="JavaPackage" value="btapi" />
				<requirement name="JavaPackage" value="mmapi" />
				<requirement name="JavaPlatform" value="MIDP/2.0+" />
			</deviceRequirements>
			
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="false"
				workDir="${build.midp.work}"
				sourceDir="${build.midp.temp}"
				destDir="${dist}"
				compilerDestDir="${bin.midp}"
				binaryLibraries="${bin-avetanaNoop}:${bin-microlog}:${bin-BC-core}"
				>
				<!-- midlets definition -->
				<midlet class="org.openuat.apps.j2me.ManualAuthentication" name="Manual authentication"/>
				<variables includeAntProperties="true">
					<variable file="${src}/configuration.midp.properties" />
				</variables>
				<!-- activate Java 5 syntax support -->
				<!-- TODO: this doesn't work yet - proguard emits errors when activated -->
				<!--<compiler source="1.5" target="1.5"/>
				<postcompiler name="java5" />-->
				<!-- obfuscator settings: do not obfuscate when the test-property is true  -->
				<obfuscator name="ProGuard" useDefaultPackage="true" unless="test or debug2">
					<!-- with optimize=true the code no longer pre-verifies -->
					<parameter name="optimize" value="false" />
					<!--<parameter name="shrink" value="true" />-->
					<!-- because BitSet implements clone (which is never called) -->
<!--					<parameter name="ignorewarnings" value="true" /> -->
				</obfuscator>
				<!-- resources to be included in the JAR file -->
				<resources>
					<!-- doesn't really do anything right now... -->
					<fileset dir="${src}" includes="microlog.properties" />
				</resources>
				<!-- user defined JAD attributes can also be used: -->
<!--				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	-->
				<!-- and of course need to sign -->
				<sign key="authentication" password="authentication" keystore="${dist}/keystore" unless="test" />
			</build>
		</j2mepolish>		

		<!-- additional files for the second MIDlet -->
		<copy todir="${build.midp.temp}" failonerror="true">
			<fileset dir="${src}" includes="org/openuat/apps/j2me/ShakeMIDlet.java
				org/openuat/sensors/SamplesSource.java org/openuat/sensors/SamplesSink.java
				org/openuat/sensors/SamplesSink_Int.java org/openuat/sensors/SegmentsSink_Int.java
				org/openuat/sensors/SegmentsSink.java
				org/openuat/sensors/TimeSeries_Int.java org/openuat/sensors/TimeSeries.java
				org/openuat/sensors/TimeSeriesAggregator.java org/openuat/sensors/DeviceStateListener.java
				org/openuat/sensors/TimeSeriesBundle.java
				org/openuat/sensors/j2me/SymbianTCPAccelerometerReader.java
				org/openuat/features/FPIntFFT.java org/openuat/features/Coherence_Int.java
				org/openuat/features/TimeSeriesUtil.java
				org/openuat/features/Coherence.java org/openuat/features/FFT.java org/openuat/features/Complex.java 
				org/openuat/authentication/accelerometer/ShakeWellBeforeUseParameters.java
				org/openuat/authentication/accelerometer/ShakeWellBeforeUseProtocol1.java
				org/openuat/authentication/DHWithVerification.java org/openuat/authentication/InterlockProtocol.java" />
				<!-- org/codec/**/*.java" /> -->
		</copy>

		<!-- build multiple versions of the ShakeMIDlet - "real" and demo modes -->
		<delete dir="${build.midp.work}"/>
		<delete dir="${bin.midp}"/>
        <mkdir dir="${build.midp.work}"/>
        <mkdir dir="${bin.midp}"/>
		<j2mepolish>
			<info
				name="Shake Well Before Use"
				version="1.0.0"
				description="A demonstration MIDlet for the Shake Well Before Use authentication protocol"
				vendorName="Rene Mayrhofer"
				infoUrl="http://www.openuat.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-shakeme.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2006, 2007 Rene Mayrhofer. All rights reserved."
			/>
			<deviceRequirements>
				<requirement name="Identifier" value="Generic/multi" />
				<requirement name="JavaPackage" value="btapi" />
				<requirement name="JavaPackage" value="mmapi" />
				<requirement name="JavaPlatform" value="MIDP/2.0+" />
			</deviceRequirements>
			<build
				symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="false"
				workDir="${build.midp.work}"
				sourceDir="${build.midp.temp}"
				destDir="${dist}"
				compilerDestDir="${bin.midp}"
				binaryLibraries="${bin-avetanaNoop}:${bin-microlog}:${bin-BC-core}"
				>
				<midlet class="org.openuat.apps.j2me.ShakeMIDlet" name="ShakeMe"/>
				<variables includeAntProperties="true">
					<variable file="${src}/configuration.midp.properties" />
					<variable name="cfg.shakingDemoMode" value="false" />
				</variables>
				<obfuscator name="ProGuard" useDefaultPackage="true" unless="test or debug2">
					<parameter name="optimize" value="false" />
				</obfuscator>
				<resources>
					<fileset dir="${resources}" includes="*.png" />
					<fileset dir="${src}" includes="microlog.properties" />
				</resources>
				<sign key="authentication" password="authentication" keystore="${dist}/keystore" unless="test" />
			</build>
		</j2mepolish>

		<!-- need to build afresh, because the source code is changed by the precompiler (and we patch in the Bluetooth MACs) -->
		<!-- disabled for now, demo no longer used
		<delete dir="${build.midp.work}"/>
		<delete dir="${bin.midp}"/>
        <mkdir dir="${build.midp.work}"/>
        <mkdir dir="${bin.midp}"/>
		<j2mepolish>
			<info
				name="Shake Well Before Use"
				version="1.0.0"
				description="A demonstration MIDlet for the Shake Well Before Use authentication protocol"
				vendorName="Rene Mayrhofer"
				infoUrl="http://www.openuat.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-shakeme-DEMOSET1.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2006, 2007 Rene Mayrhofer. All rights reserved."
			/>
			<deviceRequirements>
				<requirement name="Identifier" value="Generic/multi" />
				<requirement name="JavaPackage" value="btapi" />
				<requirement name="JavaPackage" value="mmapi" />
				<requirement name="JavaPlatform" value="MIDP/2.0+" />
			</deviceRequirements>
			<build
				symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="false"
				workDir="${build.midp.work}"
				sourceDir="${build.midp.temp}"
				destDir="${dist}"
				compilerDestDir="${bin.midp}"
				binaryLibraries="${bin-avetanaNoop}:${bin-microlog}:${bin-BC-core}"
				>
				<midlet class="org.openuat.apps.j2me.ShakeMIDlet" name="ShakeMe"/>
				<variables includeAntProperties="true">
					<variable file="${src}/configuration.midp.properties" />
					<variable name="cfg.shakingDemoMode" value="true" />
					<variable name="demo.peer1" value="00180FA4C997" />
					<variable name="demo.peer2" value="00180FA3A1D4" />
				</variables>
				<obfuscator name="ProGuard" useDefaultPackage="true" unless="test or debug2">
					<parameter name="optimize" value="false" />
				</obfuscator>
				<resources>
					<fileset dir="${resources}" includes="button_*.png" />
					<fileset dir="${src}" includes="microlog.properties" />
				</resources>
				<sign key="authentication" password="authentication" keystore="${dist}/keystore" unless="test" />
			</build>
		</j2mepolish>
		<delete dir="${build.midp.work}"/>
		<delete dir="${bin.midp}"/>
        <mkdir dir="${build.midp.work}"/>
        <mkdir dir="${bin.midp}"/>
		<j2mepolish>
			<info
				name="Shake Well Before Use"
				version="1.0.0"
				description="A demonstration MIDlet for the Shake Well Before Use authentication protocol"
				vendorName="Rene Mayrhofer"
				infoUrl="http://www.openuat.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-shakeme-DEMOSET2.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2006, 2007 Rene Mayrhofer. All rights reserved."
			/>
			<deviceRequirements>
				<requirement name="Identifier" value="Generic/multi" />
				<requirement name="JavaPackage" value="btapi" />
				<requirement name="JavaPackage" value="mmapi" />
				<requirement name="JavaPlatform" value="MIDP/2.0+" />
			</deviceRequirements>
			<build
				symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="false"
				workDir="${build.midp.work}"
				sourceDir="${build.midp.temp}"
				destDir="${dist}"
				compilerDestDir="${bin.midp}"
				binaryLibraries="${bin-avetanaNoop}:${bin-microlog}:${bin-BC-core}"
				>
				<midlet class="org.openuat.apps.j2me.ShakeMIDlet" name="ShakeMe"/>
				<variables includeAntProperties="true">
					<variable file="${src}/configuration.midp.properties" />
					<variable name="cfg.shakingDemoMode" value="true" />
					<variable name="demo.peer1" value="00180FA3A1D7" />
					<variable name="demo.peer2" value="00180FA3A1D0" />
				</variables>
				<obfuscator name="ProGuard" useDefaultPackage="true" unless="test or debug2">
					<parameter name="optimize" value="false" />
				</obfuscator>
				<resources>
					<fileset dir="${resources}" includes="button_*.png" />
					<fileset dir="${src}" includes="microlog.properties" />
				</resources>
				<sign key="authentication" password="authentication" keystore="${dist}/keystore" unless="test" />
			</build>
		</j2mepolish> 
		-->
		
		<!-- create JAD files -->
<!--		<wtkjad jadfile="${build}/HelloProperty.jad"
			jarfile="HelloProperty.jar"
			name="MyHelloProperty"
			vendor="Rene Mayrhofer"
			version="0.0.1"
			update="true">
			<midlet name="MyHelloProperty" class="org.openuat.apps.j2me.HelloProperty"/>
		</wtkjad>-->
    	
		<!-- and package and preverify -->
		<!-- TODO: specify required libraries that should be put into the package with the libclasspath property or nested FileSet or ZipFileSet or ZipGroupFileSet elements -->
		<!-- TODO: set obfuscate=true -->
<!--		<wtkpackage jarfile="${build}/HelloProperty.jar" jadfile="${build}/HelloProperty.jad" preverify="false" obfuscate="false">
			<fileset dir="${bin}" includes="org/openuat/apps/j2me/HelloProperty.class"/>
		</wtkpackage>
		<wtkpackage jarfile="${build}/BluetoothDemo.jar" jadfile="${build}/BluetoothDemo.jad" preverify="false" obfuscate="false">
			<fileset dir="${bin}" includes="org/openuat/apps/j2me/BluetoothDemo.class 
				org/openuat/util/Bluetooth*.class org/openuat/util/RemoteConnection.class
				org/openuat/util/HostServerBase.class org/openuat/authentication/HostProtocolHandler*.class 
				org/openuat/authentication/SimpleKeyAgreement.class org/openuat/util/Hash.class
				org/openuat/authentication/AuthenticationEventSender.class 
				org/openuat/authentication/AuthenticationProgressHandler.class org/openuat/authentication/exceptions/*.class"/>
			<fileset dir="${thirdparty}/avetanaNoop" includes="de/avetana/bluetooth/stack/**/*.class"/>
			 need the apache commons files 
			<fileset dir="${bin-BC-core}" includes="org/apache/commons/codec/**/*.class"/>
			 and MicroLog as log4j replacement 
			<fileset dir="${bin-microlog}" includes="**/*.class"/>
			<fileset dir="${src}" includes="microlog.properties"/>
			 the dependencies for SimpleKeyAgreement 
			<fileset dir="${bin-BC-core}" />
		</wtkpackage>-->
    	
<!--		<wtkpreverify jarfile="${build}/HelloProperty.jar" jadfile="${build}/HelloProperty.jad"/>
		<wtkpreverify jarfile="${build}/BluetoothDemo.jar" jadfile="${build}/BluetoothDemo.jad"/>-->
	</target>
	

	<target name="run-midp" depends="jar-midp" description="Run the J2ME MIDP applications in the simulator" if="haveWTK">
		<j2mepolish>
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>
		</j2mepolish>
	</target>

	<target name="push-midp" depends="jar-midp" description="Push the generated MIDP applications to a device via OBEX push">
		<exec executable="obexftp">
			<arg line="-b 00:18:0F:A4:C9:97"/>
       		<!-- can add as many as necessary -->
		  	<!-- <arg line="-p ${build}/HelloProperty.jar"/> -->
			<!--<arg line="-p ${dist}/Generic-multi-bt_dh-demo.jar"/>-->
			<!--<arg line="-p ${dist}/Generic-multi-shakeme-DEMOSET1.jar"/>-->
			<arg line="-p ${dist}/Generic-multi-shakeme.jar"/>
		</exec>
		<exec executable="obexftp">
			<arg line="-b 00:18:0F:A3:A1:D4"/>
			<arg line="-p ${dist}/Generic-multi-shakeme.jar"/>
		</exec>

<!--		<exec executable="obexftp">
			<arg line="-b 00:18:0F:A3:A1:D7"/>
			<arg line="-p ${dist}/Generic-multi-shakeme-DEMOSET2.jar"/>
		</exec>
		<exec executable="obexftp">
			<arg line="-b 00:18:0F:A3:A1:D0"/>
			<arg line="-p ${dist}/Generic-multi-shakeme-DEMOSET2.jar"/>
		</exec>-->
	</target>

	<!-- ATTENTION: when changing this task, need to copy to the copy in the coverage report below! -->
	<target name="junit" depends="jar" description="Run unit tests">
		<mkdir dir="${reports.tests}"/>
		<!-- for the jvmarg to work, need to set fork=true -->
		<junit printsummary="on" haltonfailure="true"
		       haltonerror="true" showoutput="false" fork="true" forkmode="perTest">
			<!-- doesn't do anything with fork=false -->
			<jvmarg value="-Djava.library.path=nativelib/linux" />
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-Xms512m" />
			<classpath>
				<fileset refid="lib.alljars"/>
				<pathelement location="${jarfile.core}"/>
				<pathelement location="${jarfile.channels}"/>
				<pathelement location="${jarfile.apps}"/>
				<!-- to also use the log4.properties file -->
				<pathelement location="${src}"/>
			</classpath>
			<formatter type="plain" usefile="true"/>
			<batchtest todir="${reports.tests}">
				<fileset dir="${src}">
					<include name="**/*Test*.java"/>
					<exclude name="**/MotionAuthenticationProtocol1Test.java"/>
					<exclude name="**/MotionAuthenticationProtocol2Test.java"/>
				</fileset>
			</batchtest>
		    <!--<test name="org.openuat.authentication.test.MotionAuthenticationProtocol1Test" todir="${reports.tests}"/>-->
		    <!--<test name="org.openuat.authentication.test.MotionAuthenticationProtocol2Test" todir="${reports.tests}"/>-->
		</junit>
	</target>
	
	<!-- This target generates coverage reports of the JUnit tests -->
	<target name="coverage-report" depends="jar" description="Create unit test coverage reports">
		<mkdir dir="${build}/instrumented-classes"/>
		<mkdir dir="${reports.coverage}"/>
		
		<cobertura-instrument todir="${build}/instrumented-classes">
			<fileset dir="${bin}">
				<include name="**/*.class"/>
				<exclude name="**/*Test*.java"/>
			</fileset>
		</cobertura-instrument>
		
		<junit printsummary="on" haltonfailure="true"
		       haltonerror="true" showoutput="false" fork="true" forkmode="perTest">
			<!-- doesn't do anything with fork=false -->
			<jvmarg value="-Djava.library.path=nativelib/linux" />
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-Xms512m" />
			<classpath>
				<pathelement location="${lib}/cobertura-1.8.jar"/>
				<pathelement location="${build}/instrumented-classes"/>
				<fileset refid="lib.alljars"/>
				<!-- to also use the log4.properties file -->
				<pathelement location="${src}"/>
			</classpath>
			<formatter type="plain" usefile="true"/>
			<batchtest todir="${reports.tests}">
				<fileset dir="${src}">
					<include name="**/*Test*.java"/>
					<exclude name="**/MotionAuthenticationProtocol1Test.java"/>
					<exclude name="**/MotionAuthenticationProtocol2Test.java"/>
				</fileset>
			</batchtest>
		</junit>
		
		<cobertura-report destdir="${reports.coverage}">
				<fileset dir="${src}">
				</fileset>
		</cobertura-report>
	</target>
	
	<target name="check" description="Check source code for style">
		<checkstyle config="${src}/checkstyle_checks.xml">
			<fileset dir="${src}" includes="**/*.java"/>
			<formatter type="plain"/>
			<formatter type="xml" toFile="${reports.checkstyle}"/>
		</checkstyle>
	</target>
	
	<target name="findbugs" depends="jar">
		<findbugs home="${findbugs.home}"
			output="xml"
			outputFile="${reports}/findbugs.xml" >
			<auxClasspath path="${jarfile.distbundle}" />
			<sourcePath path="${src}" />
			<class location="${jarfile.core}:${jarfile.channels}:${jarfile.apps}" />
		</findbugs>
	</target>
	
	<target name="run" depends="jar" description="Run jar file">
		<!-- executing the jar obviously does not work with an additional classpath, but only with a single
	     merged jar file, so just specify the class -->
		<!--<java jar="${jarfile}" fork="yes" failonerror="true" >-->
		<java classname="${dist.mainclass}" fork="yes" failonerror="true" >
			<sysproperty key="java.library.path" value="nativelib/linux" />
			<classpath>
				<fileset refid="lib.alljars"/>
				<pathelement location="${jarfile}"/>
			</classpath>
		</java>
	</target>
		
	<target name="installer" depends="junit" description="Create installers">
		<nsis script="${dist}/windows.nsi" verbosity="4" nocd="yes">
			<define name="distdir" value="${dist}"/>
			<define name="nativelibs" value="${thirdparty.nativelib}/windows"/>
			<scriptcmd cmd="CRCcheck on"/>
		</nsis>
	</target>
	
	<target name="dist-webstart" depends="jar" description="Create distribution for Java webstart">
		<mkdir dir="${dist.webstart}"/>
	    <!-- Linux native libraries -->
<!--	    <copy file="${lib}/linux/swt-3.1.1_gtk.linux.x86.jar" 
		  tofile="${dist.webstart}/swt-3.1_gtk.linux.x86.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_gtk.linux.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/linux/" includes="libswt*.so" />
	    </zip>-->
		<zip zipfile="${dist.webstart}/rxtx-2.1-native_linux.x86.jar" 
		     update="true" duplicate="fail">
			<fileset dir="${nativelib}/linux/" includes="librxtxSerial.so" />
		</zip>

	    <!-- Windows native libraries -->
<!--	    <copy file="${lib}/win32/swt-3.1_win32.x86.jar" 
		  tofile="${dist.webstart}/swt-3.1_win32.x86.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_win32.x86.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/win32/" includes="swt*.dll" />
	    </zip>-->
		<zip zipfile="${dist.webstart}/rxtx-2.1-native_win32.x86.jar" 
		     update="true" duplicate="fail">
			<fileset dir="${nativelib}/win32/" includes="rxtxSerial.dll" />
		</zip>
		<zip zipfile="${dist.webstart}/ipsec-1.0-native_win32.x86.jar" 
		     update="true" duplicate="fail">
			<fileset dir="${nativelib}/win32/" includes="ipsecJNI.dll" />
		</zip>

	    <!-- MacOXX native libraries -->
<!--	    <copy file="${lib}/macosx/swt-3.1_macosx.jar" 
		  tofile="${dist.webstart}/swt-3.1_macosx.jar"/>
	    <zip zipfile="${dist.webstart}/swt-3.1-native_macosx.jar" 
		 update="true" duplicate="fail">
		    <fileset dir="${nativelib}/macosx/" includes="libswt*.jnilib" />
	    </zip>-->
		<zip zipfile="${dist.webstart}/rxtx-2.1-native_macosx.jar" 
		     update="true" duplicate="fail">
			<fileset dir="${nativelib}/macosx/" includes="librxtxSerial.jnilib" />
		</zip>
		
		<!-- don't forget the relate core -->
		<copy file="${lib}/relate-2.2-core.jar" todir="${dist.webstart}" />
		<copy file="${lib}/relate-2.2-apps.jar" todir="${dist.webstart}" />
		<!-- nor the required support libraries -->
		<copy file="${lib}/log4j-1.2.jar" todir="${dist.webstart}" />
		<copy file="${lib}/kxml2-2.2.2.jar" todir="${dist.webstart}" />
		<copy file="${lib}/RXTXcomm.jar" todir="${dist.webstart}" />
		
		<!-- and the spatial authentication distribution itself, including the JNLP file -->
		<copy file="${jarfile.core}" todir="${dist.webstart}" />
		<copy file="${jarfile.channels}" todir="${dist.webstart}" />
		<copy file="${jarfile.apps}" todir="${dist.webstart}" />
		<copy file="${dist}/IPSecConnectorClient.jnlp" todir="${dist.webstart}" />
	    
	    <!-- the key was created with 
		 "keytool -genkey -keystore dist/keystore -alias authentication -validity 1500 -keyalg RSA"
		 with password "authentication" for both the keystore and the key -->
		<signjar alias="authentication" storepass="authentication" keystore="${dist}/keystore">
			<fileset dir="${dist.webstart}/" includes="*.jar"/>
		</signjar>
	</target>
	
	<target name="dist-javadoc" description="Create distribution files for the documentation (Javadoc)">
		<mkdir dir="${dist.javadoc}"/>
		<javadoc sourcepath="${src}" destdir="${dist.javadoc}" 
		     packagenames="org.openuat.*"
		     classpathref="lib.path.all"
		     access="protected"
		     version="true" author="true" source="1.5">
			<bottom><![CDATA[<i>2005-2006, Rene Mayrhofer.</i>]]></bottom>
			<link href="www.openuat.org"/>
		</javadoc>
		
		<!-- and also zip it up -->
		<zip zipfile="${zipfile.javadoc}" update="true" duplicate="fail">
			<fileset dir="${dist.javadoc}"/>
		</zip>
	</target>

	<target name="dist-source" description="Create source distribution">
		<zip zipfile="${zipfile.source}" update="true" duplicate="fail">
			<fileset dir="." 
		    	     includes="build.xml Changelog .classpath .project 
						src/**/* lib/**/* doc/**/* dist/*.jnlp 
						tests/**/*
						thirdparty/bouncycastle-*-deps/**/* 
						thirdparty/avetanabt/**/* thirdparty/ipsec2k.1.1/**/*.h 
						thirdparty/ipsec2k.1.1/**/*.cpp thirdparty/ipsec2k.1.1/**/wstring 
						thirdparty/ipsec2k.1.1/**/buffer thirdparty/ipsec2k.1.1/**/*.vcproj 
						thirdparty/ipsec2k.1.1/**/*.sln thirdparty/ipsec2k.1.1/**/*.txt 
						thirdparty/apache-bzip2/**/* thirdparty/log4jMini/**/* 
						thirdparty/microlog/**/* thirdparty/log4jNoop/**/* 
						thirdparty/avetanaNoop/**/* nativelib/**/* 
						thirdparty/NokiaAccelerometerSensorDaemon/**/*
						thirdparty/findbugs-*/**/*"/>
		</zip>
	</target>
    
	<target name="dist" depends="dist-webstart,dist-javadoc,dist-source"
		description="Create a complete distribution, including webstart, source, and docs"/>
    
<!--    <target name="deploy-webstart" depends="dist-webstart" 
	    description="Upload the web start distribution files to the web server">
	    <scp todir="root@ubicomp.lancs.ac.uk:/home/httpd/fileadmin/relate/webstart/"
		 trust="false" failonerror="true">
		    <fileset dir="${dist.webstart}"/>
	    </scp>
	    <sshexec host="ubicomp.lancs.ac.uk" username="root" trust="false" 
		     failonerror="true" 
		     command="chown www-data:www-data /home/httpd/fileadmin/relate/webstart/*"/>
    </target>-->

	<target name="clean" description="Remove build and dist directories">
		<delete dir="${build}"/>
		<!-- <delete dir="${reports}"/> -->
		<delete>
			<fileset dir="${dist}" includes="*.jar,*.zip"/>
		</delete>
		<delete dir="${dist.webstart}"/>
		<delete dir="${dist.javadoc}"/>
	</target>
</project>
